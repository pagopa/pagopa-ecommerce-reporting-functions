# Only manual triggers
trigger: none
pr: none

pool:
  vmImage: ubuntu-latest

parameters:
  - name: ENV
    displayName: Target Environment
    type: string
    default: dev
    values:
      - dev
      - uat
      - prod
  - name: "FORCE_REPLACE_DOCKER_IMAGE"
    displayName: "Force the existing docker image to be replaced"
    type: boolean
    default: False
    values:
      - False
      - True

variables:
  imageRepository: '$(K8S_IMAGE_REPOSITORY_NAME)'
  nameSpace: 'ecommerce'

  ${{ if eq(parameters['ENV'], 'dev') }}:
    dockerRegistryServiceConnection: $(DEV_CONTAINER_REGISTRY_SERVICE_CONN)
    dockerRegistryFqdn: $(DEV_CONTAINER_NAMESPACE)
    kubernetesServiceConnection: '$(DEV_KUBERNETES_SERVICE_CONN)'
    poolImage: 'pagopa-dev-linux'
  ${{ if eq(parameters['ENV'], 'uat') }}:
    dockerRegistryServiceConnection: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
    dockerRegistryFqdn: $(UAT_CONTAINER_NAMESPACE)
    kubernetesServiceConnection: '$(UAT_KUBERNETES_SERVICE_CONN)'
    poolImage: 'pagopa-uat-linux'
  ${{ if eq(parameters['ENV'], 'prod') }}:
    dockerRegistryServiceConnection: $(PROD_CONTAINER_REGISTRY_SERVICE_CONN)
    dockerRegistryFqdn: $(PROD_CONTAINER_NAMESPACE)
    kubernetesServiceConnection: '$(PROD_KUBERNETES_SERVICE_CONN)'
    poolImage: 'pagopa-prod-linux'


  ${{ if eq(variables['Build.SourceBranchName'], 'merge') }}:
    sourceBranch: "main" # force to main branch
  ${{ if ne(variables['Build.SourceBranchName'], 'merge') }}:
    sourceBranch: ${{ variables['Build.SourceBranchName'] }}



resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v2.10.1
      endpoint: 'io-azure-devops-github-ro'

stages:

  # Create a release on GitHub
  - stage: "Get_Release_Version"
    jobs:
      - job: get_version
        steps:
          - template: azure-templates/chart-current-version.yml

  # Build and Push Docker Image
  - stage: Build
    dependsOn: Get_Release_Version
    variables:
      current_version: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.appVersion'] ]
    jobs:
      - job: "build"
        steps:
          - checkout: self
            persistCredentials: true

          - script: |
              git checkout $(sourceBranch)
            displayName: Checkout and update branch

          - template: templates/docker-release/template.yaml@pagopaCommons
            parameters:
              CONTAINER_REGISTRY_SERVICE_CONN: $(dockerRegistryServiceConnection)
              CONTAINER_REGISTRY_FQDN: $(dockerRegistryFqdn)
              DOCKER_IMAGE_NAME: $(imageRepository)
              DOCKER_IMAGE_TAG: $(current_version)
              FORCE_REPLACE_DOCKER_IMAGE: ${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}


  # Deploy on K8s with Helm
  - stage: Deploy
    dependsOn:
      - Get_Release_Version
      - Build
    variables:
      deploy_version: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.appVersion'] ]
    jobs:
      - deployment: "deploy"
        pool:
          name: $(poolImage)
        environment: ${{ parameters['ENV'] }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"

                - task: KubectlInstaller@0

                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm

                - template: templates/helm-microservice-chart-deploy/template.yaml@pagopaCommons
                  parameters:
                    DO_DEPLOY: true
                    ENV: ${{ parameters['ENV'] }}
                    KUBERNETES_SERVICE_CONN: ${{ variables.kubernetesServiceConnection }}
                    NAMESPACE: $(nameSpace)
                    APP_NAME: $(imageRepository)
                    VALUE_FILE: "helm/values-${{ parameters['ENV'] }}.yaml"
                    DEPLOY_VERSION: $(deploy_version)


